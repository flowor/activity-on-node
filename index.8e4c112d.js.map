{"mappings":"AACO,MAAMA,EAaLC,YAAKC,EAAYC,EAAeC,GAChCC,KAAKC,OAASJ,EACdG,KAAKE,aAAAJ,EACLE,KAAKG,UAAAJ,EACRC,KAAAI,uBAAA,IAAAC,MAEDL,KAAQM,qBAAG,IAAAD,K,YAIX,OAAAL,KAAcC,M,kBAId,OAAWD,KAAGE,Y,eAId,OAAAF,KAAAG,S,4BAIA,OAAAH,KAAAI,sB,0BAKA,OAAAJ,KAAAM,oB,uBAIA,OAAAN,KAAAI,uBAAoBG,M,qBAIpB,OAAAP,KAAAM,qBAA6CC,M,yBAEpCC,GAIT,OAHIA,EAAOF,qBAAKG,KAAuBT,MACtCA,KAAAI,uBAAAK,KAAAD,GAEDR,KAAAI,sB,CAYIM,gBAEA,GAAa,IAAbV,KAAOW,sBAAM,SAEhB,IAAAC,EAAAZ,KAAAa,2BAAAC,KAAAC,KAAAC,mBAUD,OARAC,KAAAC,OAAAN,E,CAwBII,iBAGA,OAAIhB,KAAAU,gBAAmBV,KAAAmB,a,CAOvBC,eACH,WAAApB,KAAAW,sBAAAX,KAAAU,gBAEJV,KAAAqB,gBAAArB,KAAAmB,a,+NC3GD,IAAIG,EAAU,ICDP,MAcC1B,cACHI,KAAAuB,YAAA,IAAAlB,MAGDL,KAAAwB,MAAA,C,CAGCC,OAED,OAAAzB,KAAAwB,K,CAGCE,UAED,OAAoC,IAApC1B,KAAgBwB,K,gBAEFhB,GAId,OAHIR,KAAAuB,YAAYd,KAAAD,GACfR,KAAAwB,QAEDxB,KAAgBuB,W,gBAGDf,GACX,IAAImB,E,KAIJ3B,KAAAuB,YAAAK,QAAApB,GACImB,EAAK,EAAY,MAAM,IAACE,MAAA,4CAE3B7B,KAAAuB,YAAAO,OAAAH,EAAA,GACJ3B,KAAAwB,O,2BAOG,IAAAO,EAAa/B,KAAAuB,YAAAS,QAAAjB,GAAA,IAAAA,EAAAkB,sBAAAnB,KAAAC,KAAAC,mBAEpB,OADIC,KAAAC,OAAAa,E,GDnDDG,EAAY,IAAIvC,EAAS,IAAK,yBAA0B,GACxDwC,EAAY,IAAIxC,EAAS,IAAK,eAAgB,GAC9CyC,EAAY,IAAIzC,EAAS,IAAK,sBAAuB,GACrD0C,EAAY,IAAI1C,EAAS,IAAK,mBAAoB,GAEtD2B,EAAQgB,eAAeJ,GACvBZ,EAAQgB,eAAeH,GACvBb,EAAQgB,eAAeF,GACvBd,EAAQgB,eAAeD,GAEvBF,EAAUI,wBAAwBL,GAClCE,EAAUG,wBAAwBL,GAClCG,EAAUE,wBAAwBJ,GAClCE,EAAUE,wBAAwBH","sources":["src/ts/activity.ts","src/ts/main.ts","src/ts/network.ts"],"sourcesContent":["\r\nexport class Activity {\r\n\r\n    _title: string;\r\n    _description: string;\r\n    _duration: number;\r\n    _immediatePredecessors: Array<Activity>;\r\n    _immediateSuccessors: Array<Activity>;\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor (title: string, description: string, duration: number) {\r\n        this._title = title;\r\n        this._description = description;\r\n        this._duration = duration;\r\n        this._immediatePredecessors = new Array();\r\n        this._immediateSuccessors = new Array();\r\n    }\r\n\r\n    getTitle() {\r\n        return this._title;\r\n    }\r\n\r\n    getDescription() {\r\n        return this._description;\r\n    }\r\n\r\n    getDuration() {\r\n        return this._duration;\r\n    }\r\n\r\n    getImmediatePredecessors() {\r\n        return this._immediatePredecessors;\r\n    }\r\n\r\n    getImmediateSuccessors() {\r\n        return this._immediateSuccessors;\r\n    }\r\n\r\n\r\n    getPredecessorCount() {\r\n        return this._immediatePredecessors.length;\r\n    }\r\n\r\n    getSuccessorCount() {\r\n        return this._immediateSuccessors.length;\r\n    }\r\n\r\n    addImmediatePredecessor (activity: Activity) {\r\n        activity._immediateSuccessors.push(this);\r\n        this._immediatePredecessors.push(activity);\r\n        return this._immediatePredecessors;\r\n    }\r\n\r\n    /**\r\n     * early start time of activity A based on the early finish times of all immediate predecessors.\r\n     * @param activity activity to get early start of\r\n     */\r\n     getEarlyStart (): number {\r\n        if (this.getPredecessorCount() === 0)\r\n            return 0;\r\n       \r\n        let predecessorsEf = this.getImmediatePredecessors().map(a => a.getEarlyFinish());\r\n        let maxEf = Math.max(...predecessorsEf);\r\n\r\n        // Another way to do the above but less clear\r\n        // let predecessorWithMaxEf = activity.getImmediatePredecessors().reduce((p, c) => this.getEarlyFinish(p) > this.getEarlyFinish(c) ? p : c);\r\n\r\n        return maxEf;\r\n        \r\n    }\r\n    \r\n    /**\r\n     * early finish time of activity A, which is constrained by its early start time. \r\n     * @param activity activity to get early finish of\r\n     */\r\n    getEarlyFinish (): number {\r\n        return this.getEarlyStart() + this.getDuration();\r\n    }\r\n    \r\n    /**\r\n     * late start time of activity A, which is constrained by its late finish time.\r\n     * @param activity activity to get late start of\r\n     */\r\n    getLateStart (): number {\r\n        if (this.getPredecessorCount() === 0)\r\n            return this.getEarlyStart();\r\n\r\n        return this.getLateFinish() - this.getDuration();\r\n    }\r\n\r\n    /**\r\n     * late finish time of activity A without delaying the late start time of all immediate successors. \r\n     * @param activity activity to get late finish of\r\n     */\r\n    getLateFinish (): number {\r\n        if (this.getSuccessorCount() === 0)\r\n            return this.getEarlyFinish();\r\n\r\n        let successorLS = this.getImmediateSuccessors().map(a => a.getLateStart());\r\n        let maxLs = Math.min(...successorLS);\r\n\r\n        return maxLs;\r\n    }\r\n\r\n    getSlack (): number {\r\n        return this.getLateStart() - this.getEarlyStart();\r\n    }\r\n\r\n}","import { Activity } from \"./activity\";\r\nimport { Network } from \"./network\";\r\n\r\nlet network = new Network();\r\n\r\nlet activityA = new Activity('A', 'Decide topic and scope', 1);\r\nlet activityB = new Activity('B', 'Collect Data', 2);\r\nlet activityC = new Activity('C', 'Search the Internet', 3);\r\nlet activityD = new Activity('D', 'Write the report', 5);\r\n\r\nnetwork.insertActivity(activityA);\r\nnetwork.insertActivity(activityB);\r\nnetwork.insertActivity(activityC);\r\nnetwork.insertActivity(activityD);\r\n\r\nactivityB.addImmediatePredecessor(activityA);\r\nactivityC.addImmediatePredecessor(activityA);\r\nactivityD.addImmediatePredecessor(activityB);\r\nactivityD.addImmediatePredecessor(activityC);\r\n\r\n\r\n","import { Activity } from \"./activity\";\r\n\r\nexport class Network {\r\n\r\n    /**\r\n     * Instance Variables\r\n     */\r\n\r\n    _activities: Array<Activity>;\r\n    _size: number;\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor () {\r\n        this._activities = new Array();\r\n        this._size = 0;\r\n    }\r\n\r\n\r\n    /* Return the size of this container */\r\n    size () {\r\n        return this._size;\r\n    }\r\n\r\n    /* Return true if and only if this container has no Elements */\r\n    isEmpty () {\r\n        return this._size === 0;\r\n    }\r\n\r\n    insertActivity (activity: Activity) {\r\n        this._activities.push(activity);\r\n        this._size++;\r\n        return this._activities;\r\n    }\r\n\r\n    removeActivity (activity: Activity) {\r\n        let targetIndex: number;\r\n\r\n        targetIndex = this._activities.indexOf(activity);\r\n        if (targetIndex < 0) {\r\n            throw new Error('Activity does not exist in this Network.');\r\n        }\r\n        else\r\n        {\r\n            this._activities.splice(targetIndex, 1);\r\n            this._size--;\r\n        }\r\n    }\r\n\r\n    getProjectCompetionTime(): number {\r\n        // Max [EF(all ending activities)]\r\n        let endingActivities = this._activities.filter(a => a.getSuccessorCount() === 0).map(a => a.getEarlyFinish());\r\n        let maxEf = Math.max(...endingActivities);\r\n\r\n        return maxEf;\r\n    }\r\n}"],"names":["$01d5d345e66f65c4$export$9c16c1426311996d","constructor","title","description","duration","this","_title","_description","_duration","_immediatePredecessors","Array","_immediateSuccessors","length","activity","push","getEarlyStart","getPredecessorCount","predecessorsEf","getImmediatePredecessors","map","a","getEarlyFinish","Math","max","getDuration","getLateStart","getLateFinish","$e366f2c43bf887ab$var$network","_activities","_size","size","isEmpty","targetIndex","indexOf","Error","splice","endingActivities","filter","getSuccessorCount","$e366f2c43bf887ab$var$activityA","$e366f2c43bf887ab$var$activityB","$e366f2c43bf887ab$var$activityC","$e366f2c43bf887ab$var$activityD","insertActivity","addImmediatePredecessor"],"version":3,"file":"index.8e4c112d.js.map"}